#!/bin/sh

#
# Copyright © 2015-2021 the original authors.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      https://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
# SPDX-License-Identifier: Apache-2.0
#

##############################################################################
#
#   Gradle start up script for POSIX generated by Gradle.
#
#   Important for running:
#
#   (1) You need a POSIX-compliant shell to run this script. If your /bin/sh is
#       noncompliant, but you have some other compliant shell such as ksh or
#       bash, then to run this script, type that shell name before the whole
#       command line, like:
#
#           ksh Gradle
#
#       Busybox and similar reduced shells will NOT work, because this script
#       requires all of these POSIX shell features:
#         * functions;
#         * expansions «$var», «${var}», «${var:-default}», «${var+SET}»,
#           «${var#prefix}», «${var%suffix}», and «$( cmd )»;
#         * compound commands having a testable exit status, especially «case»;
#         * various built-in commands including «command», «set», and «ulimit».
#
#   Important for patching:
#
#   (2) This script targets any POSIX shell, so it avoids extensions provided
#       by Bash, Ksh, etc; in particular arrays are avoided.
#
#       The "traditional" practice of packing multiple parameters into a
#       space-separated string is a well documented source of bugs and security
#       problems, so this is (mostly) avoided, by progressively accumulating
#       options in "$@", and eventually passing that to Java.
#
#       Where the inherited environment variables (DEFAULT_JVM_OPTS, JAVA_OPTS,
#       and GRADLE_OPTS) rely on word-splitting, this is performed explicitly;
#       see the in-line comments for details.
#
#       There are tweaks for specific operating systems such as AIX, CygWin,
#       Darwin, MinGW, and NonStop.
#
#   (3) This script is generated from the Groovy template
#       https://github.com/gradle/gradle/blob/HEAD/platforms/jvm/plugins-application/src/main/resources/org/gradle/api/internal/plugins/unixStartScript.txt
#       within the Gradle project.
#
#       You can find Gradle at https://github.com/gradle/gradle/.
#
##############################################################################

# Attempt to set APP_HOME

# Resolve links: $0 may be a link
app_path=$0

# Need this for daisy-chained symlinks.
while
    APP_HOME=${app_path%"${app_path##*/}"}  # leaves a trailing /; empty if no leading path
    [ -h "$app_path" ]
do
    ls=$( ls -ld "$app_path" )
    link=${ls#*' -> '}
    case $link in             #(
      /*)   app_path=$link ;; #(
      *)    app_path=$APP_HOME$link ;;
    esac
done

# This is normally unused
# shellcheck disable=SC2034
APP_BASE_NAME=${0##*/}
# Discard cd standard output in case $CDPATH is set (https://github.com/gradle/gradle/issues/25036)
APP_HOME=$( cd -P "${APP_HOME:-./}" > /dev/null && printf '%s\n' "$PWD" ) || exit

# Use the maximum available, or set MAX_FD != -1 to use that value.
MAX_FD=maximum

warn () {
    echo "$*"
} >&2

die () {
    echo
    echo "$*"
    echo
    exit 1
} >&2

WRAPPER_JAR="$APP_HOME/gradle/wrapper/gradle-wrapper.jar"
WRAPPER_PROPERTIES="$APP_HOME/gradle/wrapper/gradle-wrapper.properties"

download_file() {
    src="$1"
    dest="$2"
    if [ -z "$src" ] || [ -z "$dest" ]; then
        return 1
    fi
    if command -v curl >/dev/null 2>&1; then
        if curl -fsSL "$src" -o "$dest"; then
            return 0
        fi
    fi
    if command -v wget >/dev/null 2>&1; then
        if wget -q "$src" -O "$dest"; then
            return 0
        fi
    fi
    rm -f "$dest"
    return 1
}

extract_wrapper_from_zip() {
    archive="$1"
    if [ ! -f "$archive" ]; then
        return 1
    fi
    if command -v python3 >/dev/null 2>&1; then
        python3 - "$archive" "$WRAPPER_JAR" <<'PY'
import io
import sys
from pathlib import Path
from typing import Optional
from zipfile import ZipFile
import zipfile

archive = Path(sys.argv[1])
target = Path(sys.argv[2])

def ensure_manifest(jar_bytes: bytes) -> bytes:
    with ZipFile(io.BytesIO(jar_bytes)) as src:
        try:
            manifest = src.read('META-INF/MANIFEST.MF').decode('utf-8', 'replace')
        except KeyError:
            return jar_bytes
        lines = [line.rstrip('\r\n') for line in manifest.splitlines() if line.strip()]
        main_present = any(line.startswith('Main-Class:') for line in lines)
        native_present = any(line.startswith('Enable-Native-Access:') for line in lines)
        if main_present and native_present:
            return jar_bytes
        if not main_present:
            lines.append('Main-Class: org.gradle.wrapper.GradleWrapperMain')
        if not native_present:
            lines.append('Enable-Native-Access: ALL-UNNAMED')
        new_manifest = '\n'.join(lines) + '\n'
        buffer = io.BytesIO()
        with ZipFile(buffer, 'w') as dst:
            for item in src.infolist():
                data = src.read(item)
                if item.filename == 'META-INF/MANIFEST.MF':
                    data = new_manifest.encode('utf-8')
                info = zipfile.ZipInfo(item.filename)
                info.date_time = item.date_time
                info.compress_type = item.compress_type
                info.comment = item.comment
                info.create_system = item.create_system
                info.create_version = item.create_version
                info.extract_version = item.extract_version
                info.flag_bits = item.flag_bits
                info.external_attr = item.external_attr
                info.internal_attr = item.internal_attr
                dst.writestr(info, data)
        return buffer.getvalue()

def extract_nested(jar_bytes: bytes) -> Optional[bytes]:
    with ZipFile(io.BytesIO(jar_bytes)) as nested:
        for entry in nested.infolist():
            if entry.filename.endswith('gradle-wrapper.jar'):
                return ensure_manifest(nested.read(entry))
    return ensure_manifest(jar_bytes)

def find_wrapper(zf: ZipFile) -> Optional[bytes]:
    preferred = None
    fallback = None
    for entry in zf.infolist():
        name = entry.filename
        if not name.endswith('.jar') or 'gradle-wrapper' not in name or '/lib/' not in name:
            continue
        data = zf.read(entry)
        if '/lib/plugins/' in name:
            preferred = data
            break
        if fallback is None:
            fallback = data
    blob = preferred or fallback
    if blob is None:
        return None
    extracted = extract_nested(blob)
    return extracted

with ZipFile(archive) as outer:
    payload = find_wrapper(outer)

if payload is None:
    sys.exit(1)

target.parent.mkdir(parents=True, exist_ok=True)
target.write_bytes(payload)
PY
        status=$?
        if [ $status -eq 0 ]; then
            return 0
        fi
    fi
    if command -v unzip >/dev/null 2>&1; then
        tmp_extract=$(mktemp -d 2>/dev/null || mktemp -d -t gradle-wrapper-extract)
        if unzip -qq "$archive" "gradle-*/lib/plugins/gradle-wrapper-*.jar" -d "$tmp_extract" 2>/dev/null; then
            plugin=$(find "$tmp_extract" -name "gradle-wrapper-*.jar" -print | head -n 1)
            if [ -n "$plugin" ]; then
                if unzip -p "$plugin" gradle-wrapper.jar > "$WRAPPER_JAR" 2>/dev/null; then
                    rm -rf "$tmp_extract"
                    return 0
                fi
            fi
        fi
        if unzip -qq "$archive" "gradle-*/lib/gradle-wrapper-*.jar" -d "$tmp_extract" 2>/dev/null; then
            plugin=$(find "$tmp_extract" -name "gradle-wrapper-*.jar" -print | head -n 1)
            if [ -n "$plugin" ]; then
                if unzip -p "$plugin" gradle-wrapper.jar > "$WRAPPER_JAR" 2>/dev/null; then
                    rm -rf "$tmp_extract"
                    return 0
                fi
            fi
        fi
        rm -rf "$tmp_extract"
    fi
    return 1
}

download_wrapper() {
    version="$1"
    distribution_url="$2"
    if ! mkdir -p "${WRAPPER_JAR%/*}" >/dev/null 2>&1; then
        return 1
    fi

    jar_url="https://repo.gradle.org/gradle/libs-releases-local/org/gradle/gradle-wrapper/${version}/gradle-wrapper-${version}.jar"
    if download_file "$jar_url" "$WRAPPER_JAR"; then
        return 0
    fi

    tmpdir=$(mktemp -d 2>/dev/null || mktemp -d -t gradle-wrapper)
    archive="$tmpdir/gradle-distribution.zip"
    if download_file "$distribution_url" "$archive"; then
        if extract_wrapper_from_zip "$archive"; then
            rm -rf "$tmpdir"
            return 0
        fi
    fi
    rm -rf "$tmpdir"
    return 1
}

if [ ! -f "$WRAPPER_JAR" ]; then
    WRAPPER_VERSION=""
    DISTRIBUTION_URL=""
    if [ -f "$WRAPPER_PROPERTIES" ]; then
        WRAPPER_VERSION=$(sed -n 's#.*gradle-\([0-9.][0-9.]*\)-.*#\1#p' "$WRAPPER_PROPERTIES" | head -n 1)
        DISTRIBUTION_URL=$(sed -n 's#^distributionUrl=##p' "$WRAPPER_PROPERTIES" | head -n 1 | sed 's#\\##g')
    fi
    if [ -z "$WRAPPER_VERSION" ]; then
        WRAPPER_VERSION="8.7"
    fi
    if [ -z "$DISTRIBUTION_URL" ]; then
        DISTRIBUTION_URL="https://services.gradle.org/distributions/gradle-${WRAPPER_VERSION}-bin.zip"
    fi
    if download_wrapper "$WRAPPER_VERSION" "$DISTRIBUTION_URL"; then
        :
    elif command -v gradle >/dev/null 2>&1; then
        warn "Gradle wrapper JAR missing; delegating to system Gradle"
        exec gradle "$@"
    else
        die "ERROR: gradle/wrapper/gradle-wrapper.jar is missing and could not be downloaded. Install Gradle or provide curl/wget and unzip/python3."
    fi
fi

# OS specific support (must be 'true' or 'false').
cygwin=false
msys=false
darwin=false
nonstop=false
case "$( uname )" in                #(
  CYGWIN* )         cygwin=true  ;; #(
  Darwin* )         darwin=true  ;; #(
  MSYS* | MINGW* )  msys=true    ;; #(
  NONSTOP* )        nonstop=true ;;
esac

CLASSPATH="\\\"\\\""


# Determine the Java command to use to start the JVM.
if [ -n "$JAVA_HOME" ] ; then
    if [ -x "$JAVA_HOME/jre/sh/java" ] ; then
        # IBM's JDK on AIX uses strange locations for the executables
        JAVACMD=$JAVA_HOME/jre/sh/java
    else
        JAVACMD=$JAVA_HOME/bin/java
    fi
    if [ ! -x "$JAVACMD" ] ; then
        die "ERROR: JAVA_HOME is set to an invalid directory: $JAVA_HOME

Please set the JAVA_HOME variable in your environment to match the
location of your Java installation."
    fi
else
    JAVACMD=java
    if ! command -v java >/dev/null 2>&1
    then
        die "ERROR: JAVA_HOME is not set and no 'java' command could be found in your PATH.

Please set the JAVA_HOME variable in your environment to match the
location of your Java installation."
    fi
fi

# Increase the maximum file descriptors if we can.
if ! "$cygwin" && ! "$darwin" && ! "$nonstop" ; then
    case $MAX_FD in #(
      max*)
        # In POSIX sh, ulimit -H is undefined. That's why the result is checked to see if it worked.
        # shellcheck disable=SC2039,SC3045
        MAX_FD=$( ulimit -H -n ) ||
            warn "Could not query maximum file descriptor limit"
    esac
    case $MAX_FD in  #(
      '' | soft) :;; #(
      *)
        # In POSIX sh, ulimit -n is undefined. That's why the result is checked to see if it worked.
        # shellcheck disable=SC2039,SC3045
        ulimit -n "$MAX_FD" ||
            warn "Could not set maximum file descriptor limit to $MAX_FD"
    esac
fi

# Collect all arguments for the java command, stacking in reverse order:
#   * args from the command line
#   * the main class name
#   * -classpath
#   * -D...appname settings
#   * --module-path (only if needed)
#   * DEFAULT_JVM_OPTS, JAVA_OPTS, and GRADLE_OPTS environment variables.

# For Cygwin or MSYS, switch paths to Windows format before running java
if "$cygwin" || "$msys" ; then
    APP_HOME=$( cygpath --path --mixed "$APP_HOME" )
    CLASSPATH=$( cygpath --path --mixed "$CLASSPATH" )

    JAVACMD=$( cygpath --unix "$JAVACMD" )

    # Now convert the arguments - kludge to limit ourselves to /bin/sh
    for arg do
        if
            case $arg in                                #(
              -*)   false ;;                            # don't mess with options #(
              /?*)  t=${arg#/} t=/${t%%/*}              # looks like a POSIX filepath
                    [ -e "$t" ] ;;                      #(
              *)    false ;;
            esac
        then
            arg=$( cygpath --path --ignore --mixed "$arg" )
        fi
        # Roll the args list around exactly as many times as the number of
        # args, so each arg winds up back in the position where it started, but
        # possibly modified.
        #
        # NB: a `for` loop captures its iteration list before it begins, so
        # changing the positional parameters here affects neither the number of
        # iterations, nor the values presented in `arg`.
        shift                   # remove old arg
        set -- "$@" "$arg"      # push replacement arg
    done
fi


# Add default JVM options here. You can also use JAVA_OPTS and GRADLE_OPTS to pass JVM options to this script.
DEFAULT_JVM_OPTS='"-Xmx64m" "-Xms64m"'

# Collect all arguments for the java command:
#   * DEFAULT_JVM_OPTS, JAVA_OPTS, and optsEnvironmentVar are not allowed to contain shell fragments,
#     and any embedded shellness will be escaped.
#   * For example: A user cannot expect ${Hostname} to be expanded, as it is an environment variable and will be
#     treated as '${Hostname}' itself on the command line.

set -- \
        "-Dorg.gradle.appname=$APP_BASE_NAME" \
        -classpath "$CLASSPATH" \
        -jar "$WRAPPER_JAR" \
        "$@"

# Stop when "xargs" is not available.
if ! command -v xargs >/dev/null 2>&1
then
    die "xargs is not available"
fi

# Use "xargs" to parse quoted args.
#
# With -n1 it outputs one arg per line, with the quotes and backslashes removed.
#
# In Bash we could simply go:
#
#   readarray ARGS < <( xargs -n1 <<<"$var" ) &&
#   set -- "${ARGS[@]}" "$@"
#
# but POSIX shell has neither arrays nor command substitution, so instead we
# post-process each arg (as a line of input to sed) to backslash-escape any
# character that might be a shell metacharacter, then use eval to reverse
# that process (while maintaining the separation between arguments), and wrap
# the whole thing up as a single "set" statement.
#
# This will of course break if any of these variables contains a newline or
# an unmatched quote.
#

eval "set -- $(
        printf '%s\n' "$DEFAULT_JVM_OPTS $JAVA_OPTS $GRADLE_OPTS" |
        xargs -n1 |
        sed ' s~[^-[:alnum:]+,./:=@_]~\\&~g; ' |
        tr '\n' ' '
    )" '"$@"'

exec "$JAVACMD" "$@"
